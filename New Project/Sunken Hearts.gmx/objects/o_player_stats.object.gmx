<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player's stats
powerlevel = 1;
compassionlevel = 1;
class = o_data.classes[? "orion"];

//Get the stats from the class
stats = get_stats_from_class("orion");
draw_health = stats[? "health"]

//Items list
items = ds_list_create();
item_number = ds_list_create();
pickup_item(o_data.items[? "snackbar"], 4);
/* pickup_item(o_data.items[? "snackbar2"], 1);
pickup_item(o_data.items[? "cake"], 1);
pickup_item(o_data.items[? "pizza"], 2);
pickup_item(o_data.items[? "ruffdog"], 4);
pickup_item(o_data.items[? "ramen"], 1);
pickup_item(o_data.items[? "wakinshake"], 2);
pickup_item(o_data.items[? "chitcracker"], 1);
pickup_item(o_data.items[? "chitzcrackers"], 3);
pickup_item(o_data.items[? "glazemushroom"], 1); */

//Action list
actions = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the lists
ds_list_destroy(items);
ds_list_destroy(item_number);
ds_list_destroy(actions);
ds_map_destroy(stats);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the draw health
var dis = draw_health - stats[? "health"];
if (dis &gt; 1)
{
    draw_health = lerp(draw_health, stats[? "health"], .1);
}
else
{
    draw_health = stats[? "health"];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the stats for death and level-up

//Check for death
if (draw_health &lt;= 0)
{
    room_goto(r_debug2);
}

// Check for level-up
if (stats[? "powerxp"] &gt;= stats[? "maxpowerexperience"])
{
    // Update the stats
    level++;
    stats[? "powerxp"] = stats[? "powerxp"]-stats[? "maxpowerexperience"];
    stats[? "maxpowerexperience"] = powerlevel*10;
    stats[? "health"] = calculate_health(level, class[? "health"]);
    stats[? "maxhealth"] = stats[? "health"]; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
