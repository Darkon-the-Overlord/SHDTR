<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
message_current = 0;
timer = 0;
cutoff = 0;

message[0] = "";
portrait = "none";
voice = "none";
sndvoice = snd_talk01;
expPortrait = spr_stingPortrait;

nameX = 46;
speakerName = "none";
nameLength = real(string_length(speakerName));

t = 0;
//Amplitude &amp; Freq for Wavy Text
amplitude = 3;
freq = 2;
tY = 0;
boxY = 0;
nameY = 0;
charWidth = 14;
orionUp = false;

if (obj_orion.y &lt; (view_yview[0]+200))
    {
        orionUp = true;
    }
else
    {
        orionUp = false;
    }

fontdialogue = font_add('basis33.ttf', 32, false, false, 32, 128);

done = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize voice

switch(voice)
{
    case "none":
    {
        sndvoice = snd_talk01;
        break;
    }
    case "male01":
    {
        sndvoice = snd_male01;
        break;
    }
    case "maledeep":
    {
        sndvoice = snd_maledeep;
        break;
    }
    case "female01":
    {
        sndvoice = snd_female01;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Portrait

if (portrait = "sting")
{
    switch(expression)
    {
        case "normal": expPortrait = spr_stingPortrait;
        break;
        case "sly": expPortrait = spr_stingPortraitSly;
        break;
    }
}
if (portrait = "scampi")
{
    switch(expression)
    {
        case "normal": expPortrait = spr_scampiPortrait;
        break;
        case "sly": expPortrait = spr_scampiPortrait;
        break;
    }
}
if (portrait = "arkle")
{
    switch(expression)
    {
        case "normal": expPortrait = spr_arklePortrait;
        break;
        case "sly": expPortrait = spr_arklePortrait;
        break;
    }
}
if (portrait = "none")
{
    portrait = "none";
    expPortrait = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Done
if (done)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Orion Y value

    if (orionUp)
    {
        tY = view_hview[0]+120;
    }
    else
    {
        tY = view_hview[0]-260;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_get_input();

obj_orion.state = scr_player_dialogue;

image_speed = 0.2;

//t var is for modifiers
t++;
//Set Font
draw_set_font(fontdialogue);
//Set Colour
draw_set_colour(c_white);

//Read in array length
message_end = array_length_1d(message);

//If there are messages
if (message_end &gt; 0)
{
    var modifier = 0;
    var emote = "";
    var runQuestion = "";
    //How many characters allowed in each line
    if (portrait == "none") var lineEnd = 35;
    else var lineEnd = 35;
    //Variables for spacing characters
    var line = 0;
    var space = 0;
    var i = 1;
    //Delay time between printing each character
    var delay = 1;
    
    if (action_key_held)
    {
        delay--;
    }
    
    //Text Position
    
    if (portrait == "none")
    {
        var tX = 116;
        boxX = 110;
    }
    else
    {
        var tX = 166;
        boxX = 160;
    }
    
    //Draw Portrait
        
    if (portrait != "none")
    {
        if (orionUp)
        {
            scr_drawSpeakerName();
            draw_sprite(spr_portraitShadow, image_index, 34, view_hview[0]+106);
            draw_sprite(expPortrait, image_index, 34, view_hview[0]+106);
        }
        else
        {
            draw_sprite(spr_portraitShadow, image_index, 34, view_hview[0]-222);
            scr_drawSpeakerName();
            draw_sprite(expPortrait, image_index, 34, view_hview[0]-222);
        }
    }
    else
    {
        scr_drawSpeakerName();
    }
    
    //Make Text Box
    draw_sprite(spr_boxBG, 0, boxX, tY-2);
    draw_sprite(spr_boxBorder, 0, boxX, tY-2);
    
    //Make Character talk
    creator.image_speed = 0.2;
    
    //Play Character Voice
    if ( !audio_is_playing(sndvoice))
    {
        audio_play_sound(sndvoice, 2, false);
    }
    
    //Next message or end dialogue
    if (cutoff == string_length(message[message_current]))
    {
        //stop portrait animation
        image_speed = 0;
        image_index = 0;
        if (audio_is_playing(sndvoice)) audio_stop_sound(sndvoice);
        creator.image_index = 0;
        creator.image_speed = 0;
        //draw cursor
        timer++;
        if (timer &gt; 30)
        {
            timer = 0;
        }
        
        //Check player input
        if (action_key)
        {
            if (message_current &lt; message_end-1)
            {
                message_current++;
                cutoff = 0;
            }
            else 
            {
                timer = 0;
                done = true;
                obj_orion.state = scr_player_normal;
                audio_play_sound(snd_interact, 1, false )
                creator.talking = false;
            }
        }
    }
    
    //Typewriter
    if (cutoff &lt; string_length(message[message_current]))
    {
        if (timer &gt;= delay)
        {
            cutoff++;
            timer = 0;
        }
        else timer++;
    }
    
    //Text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff)
    {   
        //check for modifier
        if (string_char_at(message[message_current], i) == "\")
        {
            modifier = real(string_char_at(message[message_current], ++i));
            ++i;
        }
        //check for emote
        if (string_char_at(message[message_current], i) == "{")
        {
            emote = string_char_at(message[message_current], ++i);
            ++i;
        }
        
        //Go to next line
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current]))
        {
            i++;
            length++;
        }
        
        if (space+length &gt; lineEnd)
        {
            space = 0;
            tY += 12;
            line++;
        }
        i -= length;
        
        //Draw Text
            
        switch(emote)
        {
            case "n":
            {
                expression = "normal";
                break;
            }
            case "s": //sly
            {
                expression = "sly";
                break;
            }
        }
            
        switch(modifier)
        {
            case 0: //normal
            {
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth), tY+(13*line), string_char_at(message[message_current], i));
                break;
            }
            case 1: //shaky
            {
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(13*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 2: //Important
            
            {
                draw_set_colour(c_yellow);
                draw_text(tX+(space*charWidth), tY+(13*line), string_char_at(message[message_current], i));
                break;
            }
            case 3: //Shaky Important
            {
                draw_set_colour(c_yellow);
                draw_text(tX+(space*charWidth)+random_range(-1, 1), tY+(13*line)+random_range(-1, 1), string_char_at(message[message_current], i));
                break;
            }
            case 4: //Sine movement
            {
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_white);
                draw_text(tX+(space*charWidth), tY+(13*line)+shift, string_char_at(message[message_current], i));
                break;
            }
            case 5: //Gradient Text
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                draw_text(tX+(space*charWidth), tY+(13*line), string_char_at(message[message_current], i));
                break;
            }
            case 6: //Gradient &amp; Sine
            {
                draw_set_colour(make_colour_hsv(t+i, 255, 255));
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_text(tX+(space*charWidth), tY+(13*line)+shift, string_char_at(message[message_current], i));
                break;
            }
            case 7: //Wavy Important
            {
                var so = t + i;
                var shift = sin(so*pi*freq/room_speed)*amplitude;
                draw_set_colour(c_yellow);
                draw_text(tX+(space*charWidth), tY+(13*line)+shift, string_char_at(message[message_current], i));
                break;
            }
        }
        
        space++;
        i++;
    }

    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
